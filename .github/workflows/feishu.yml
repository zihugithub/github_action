name: FeiShu CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}-${{ github.actor }}
  cancel-in-progress: true

jobs:
  # set-env:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     ci_image: ${{ steps.set-image.outputs.ci_image }} # Declare output variable
  #     test_tasks: ${{ steps.set-tasks.outputs.test_tasks }}
  #     test_type: ${{ steps.set-type.outputs.test_type }}
  #   steps:
  #     - name: Set CI base Image
  #       id: set-image
  #       run: |
  #         echo "ci_image=localhost:5000/flagscale:maca.ai2.33.0.13-torch2.6-py310-ubuntu22.04-amd64-time2508051515" >> $GITHUB_OUTPUT  # Set output variable
  #     - name: Set Test Tasks
  #       id: set-tasks
  #       run: |
  #         echo "test_tasks=deepseek_r1_distill_qwen-metax,opi_llama3_1_instruct-metax,opi_llama3_1_instruct-flaggems-metax,qwen3-metax,qwen3-flaggems-metax" >> $GITHUB_OUTPUT
  #     - name: Set Test Type
  #       id: set-type
  #       run: |
  #         echo "test_type=inference" >> $GITHUB_OUTPUT

  # FEISHU_TEST:
  #   needs: set-env
  #   runs-on:  [self-hosted, Linux, X64, yfb_metax2]
  #   container:
  #     image: ${{ needs.set-env.outputs.ci_image }}
  #     options: >-
  #       --ipc=host
  #       --privileged=true
  #       --group-add video
  #       --shm-size 100gb
  #       --hostname flagscale_cicd
  #       --user root
  #       --ulimit nofile=65535:65535
  #       --ulimit memlock=-1
  #       --device=/dev/dri
  #       --device=/dev/mxcd
  #     ports:
  #       - 80

  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4
  #       with:
  #         repository: ${{ github.event.pull_request.head.repo.full_name }}
  #         ref: ${{ github.event.pull_request.head.ref }}
  #         fetch-depth: 0
  #         ssh-strict: true
  #         ssh-user: git
  #         persist-credentials: true
  #         clean: true
  #         sparse-checkout-cone-mode: true
  #         fetch-tags: false
  #         show-progress: true
  #         lfs: false
  #         submodules: false
  #         set-safe-directory: true

  #     - name: Setup Environment Info
  #       run: |
  #         echo "USER: $USER"
  #         echo "UID: $(id -u)"
  #         echo "GID: $(id -g)"
  #         echo "Home: $HOME"
  #         echo "PWD: ${PWD}"
      
  #     - name: Save running container as image
  #       run: |
  #         CONTAINER_ID=$(docker ps --filter "ancestor=${{ needs.set-env.outputs.ci_image }}" --format="{{.ID}}")
  #         NEW_IMAGE_NAME="localhost:5000/saved_containers/flagscale:$(date +%Y%m%d_%H%M%S)_${GITHUB_SHA::7}"
  #         # docker commit $CONTAINER_ID $NEW_IMAGE_NAME
  #         echo "CONTAINER_ID: ${CONTAINER_ID}\nNEW_IMAGE_NAME: ${NEW_IMAGE_NAME}"
      
  SEND_FEISHU:
    runs-on:  [self-hosted, Linux, X64, yfb_metax2]
    steps:
      - name: Checkout code & prepare env vars
        uses: actions/checkout@v4
        run: |
          env \
            GITHUB_WORKFLOW="${{ github.workflow }}"
            JOB_STATUS="${{ job.status }}"
            REPO_URL="https://github.com/${{ github.repository }}.git"
            BRANCH_TARGET=${{ github.event.pull_request.head.ref }}
            GITHUB_SHA="${{ github.sha }}"
            AUTHOR_NAME="${{ github.event.head_commit.author.name }}"
            AUTHOR_EMAIL="${{ github.event.head_commit.author.email }}"

      - name: Send Feishu notification
        # runs-on: env
        uses: NewGr8Player/feishu-message-action@v1
        with:
          webhook: ${{ secrets.FEISHU_WEBHOOK }}
          type: post
          message: '{
            "post":{
              "zh_cn":{
                "title":"flagscale → ${{ env.GITHUB_WORKFLOW }}工作流构建结果通知",
                "content":[
                  [
                    {"tag":"text","text":"Job 当前状态：${{ env.JOB_STATUS }}"}
                  ],
                  [
                    {"tag":"text","text":"仓库名: ${env.REPO_URL}"},
                    {"tag":"text","text":"目标分支: ${env.BRANCH_TARGET}"},
                    {"tag":"text","text":"提交哈希: ${env.GITHUB_SHA}"}
                  ], 
                  [
                    {"tag":"text","text":"贡献者: ${{ env.AUTHOR_NAME }} (Email: ${{ env.AUTHOR_EMAIL }})"}
                  ]
                ]
              }
            }
          }'



# 提交者: ${GITHUB_ACTOR}}
# 开始时间：run: echo "::set-output name=start_time::$(date +%Y-%m-%dT%H:%M:%SZ)"
# 结束时间:
# REPO: 
# COMMIT: 
# Job 当前状态：${{ job.status }}
# Job 开始时间戳: ${{ job.started_at }}
# 最终结论（成功/失败）: ${{ job.conclusion }}
# ${{ github.workflow }} → Workflow 名称
# ${{ runner.os }} → 执行环境的操作系统类型
# ${{ github.repo }}#${{ github.sha }} → 仓库名+提交哈希

# GITHUB_WORKFLOW：工作流的名称。
# GITHUB_RUN_ID：存储库中每次运行的唯一编号（不变）。
# GITHUB_RUN_NUMBER：特定工作流每次运行的唯一递增编号。
# GITHUB_ACTION：当前操作的唯一标识符 (id)。
# GITHUB_ACTIONS：始终为 true，用于区分本地测试与 GitHub Actions 运行。
# GITHUB_ACTOR：启动工作流的用户或应用名称。
# GITHUB_REPOSITORY：所有者和存储库名称（格式如 owner/repo）。
# GITHUB_EVENT_NAME：触发工作流的 Webhook 事件名称（如 push, pull_request）。
# GITHUB_EVENT_PATH：完整 Webhook 事件负载的文件路径。
# GITHUB_WORKSPACE：GitHub 工作区目录路径（可用于定位文件）。
# GITHUB_SHA：触发工作流的提交哈希值。
# GITHUB_REF：触发工作流的分支或标签引用（如 refs/heads/main）。
# GITHUB_HEAD_REF/GITHUB_BASE_REF：仅对分叉仓库有效，分别表示头仓库和基础仓库的分支。
# GITHUB_SERVER_URL/GITHUB_API_URL/GITHUB_GRAPHQL_URL：GitHub 服务的访问地址

# 基础文本标签
# [{"tag": "text", "text": "本次构建状态: ${RESULT==0?'&#9989;成功':'&#10060;失败'}"}]
# ${RESULT} 是动态变量，根据前序步骤的成功与否显示不同图标（✔️/❌）

# @提及用户标签 (at)
# [
#   {"tag": "text", "text": "提交者: ${GITHUB_ACTOR}}"},
#   {"tag": "at", "user_id": "ou_xxxxxx", "user_name": "张三"}
# ],
# [
#   {"tag": "text", "text": "当前提交的 Commit ID: ${GITHUB_SHA}}"},
#   {"tag": "at", "user_id": "all", "user_name": "所有人"}
# ]
# user_id 需填写飞书中的组织架构 ID（以 ou_ 开头），例如 ou_123456
# user_name 可读性更好，但实际生效依赖 ID
# all 表示全体成员都会被 @

# 超链接标签 (link) --- 不支持
# [
#   {"tag": "text", "text": "查看完整日志 →"},
#   {"tag": "link", "href": "https://github.com/zihugithub/github_action/actions/runs/${GITHUB_RUN_ID}", "text": "点击这里"}
# ]
