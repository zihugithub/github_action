name: FeiShu CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}-${{ github.actor }}
  cancel-in-progress: true

jobs:
  # set-env:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     ci_image: ${{ steps.set-image.outputs.ci_image }} # Declare output variable
  #     test_tasks: ${{ steps.set-tasks.outputs.test_tasks }}
  #     test_type: ${{ steps.set-type.outputs.test_type }}
  #   steps:
  #     - name: Set CI base Image
  #       id: set-image
  #       run: |
  #         echo "ci_image=localhost:5000/flagscale:maca.ai2.33.0.13-torch2.6-py310-ubuntu22.04-amd64-time2508051515" >> $GITHUB_OUTPUT  # Set output variable
  #     - name: Set Test Tasks
  #       id: set-tasks
  #       run: |
  #         echo "test_tasks=deepseek_r1_distill_qwen-metax,opi_llama3_1_instruct-metax,opi_llama3_1_instruct-flaggems-metax,qwen3-metax,qwen3-flaggems-metax" >> $GITHUB_OUTPUT
  #     - name: Set Test Type
  #       id: set-type
  #       run: |
  #         echo "test_type=inference" >> $GITHUB_OUTPUT

  # FEISHU_TEST:
  #   needs: set-env
  #   runs-on:  [self-hosted, Linux, X64, yfb_metax2]
  #   container:
  #     image: ${{ needs.set-env.outputs.ci_image }}
  #     options: >-
  #       --ipc=host
  #       --privileged=true
  #       --group-add video
  #       --shm-size 100gb
  #       --hostname flagscale_cicd
  #       --user root
  #       --ulimit nofile=65535:65535
  #       --ulimit memlock=-1
  #       --device=/dev/dri
  #       --device=/dev/mxcd
  #     ports:
  #       - 80

  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v4
  #       with:
  #         repository: ${{ github.event.pull_request.head.repo.full_name }}
  #         ref: ${{ github.event.pull_request.head.ref }}
  #         fetch-depth: 0
  #         ssh-strict: true
  #         ssh-user: git
  #         persist-credentials: true
  #         clean: true
  #         sparse-checkout-cone-mode: true
  #         fetch-tags: false
  #         show-progress: true
  #         lfs: false
  #         submodules: false
  #         set-safe-directory: true

  #     - name: Setup Environment Info
  #       run: |
  #         echo "USER: $USER"
  #         echo "UID: $(id -u)"
  #         echo "GID: $(id -g)"
  #         echo "Home: $HOME"
  #         echo "PWD: ${PWD}"
      
  #     - name: Save running container as image
  #       run: |
  #         CONTAINER_ID=$(docker ps --filter "ancestor=${{ needs.set-env.outputs.ci_image }}" --format="{{.ID}}")
  #         NEW_IMAGE_NAME="localhost:5000/saved_containers/flagscale:$(date +%Y%m%d_%H%M%S)_${GITHUB_SHA::7}"
  #         # docker commit $CONTAINER_ID $NEW_IMAGE_NAME
  #         echo "CONTAINER_ID: ${CONTAINER_ID}\nNEW_IMAGE_NAME: ${NEW_IMAGE_NAME}"
      
  SEND_FEISHU:
    runs-on:  [self-hosted, Linux, X64, yfb_metax2]
    steps:
      - name: Send Feishu notification
        uses: NewGr8Player/feishu-message-action@v1
        with:
          webhook: ${{ secrets.FEISHU_WEBHOOK }}
          type: post
          message: '{
            "post":{
              "zh_cn":{
                "title":"flagscale 构建结果通知",
                "content":[
                  [
                    {"tag":"text","text":"本次构建状态: ${RESULT==0?}"},
                  ]
                ]
              }
            }
          }'




                  # [
                  #   {"tag":"text","text":"当前提交的 Commit ID: ${GITHUB_SHA}"},
                  #   {"tag":"at","user_id":"all","user_name":"所有人"}
                  # ],
      
                  # [
                  #   { "tag": "action", "actions": [
                  #     "text": "查看详情",
                  #     "openLink": true,
                  #     "url": "https://th.bing.com/th/id/R.987f582c510be58755c4933cda68d525?rik=C0D21hJDYvXosw&riu=http%3a%2f%2fimg.pconline.com.cn%2fimages%2fupload%2fupc%2ftx%2fwallpaper%2f1305%2f16%2fc4%2f20990657_1368686545122.jpg&ehk=netN2qzcCVS4ALUQfDOwxAwFcy41oxC%2b0xTFvOYy5ds%3d&risl=&pid=ImgRaw&r=0"
                  #   },
                  #   {
                  #     "text": "回滚版本",
                  #     "callback": {
                  #       "type": "event",
                  #       "eventType": "message.update",
                  #       "params": { "op": "rollback" }
                  #     }
                  #   }
                  # ]
